/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tutorial;
import soot.*;
import soot.jimple.*;
import soot.jimple.JimpleBody;
import soot.jimple.internal.JIfStmt;
import soot.options.Options;
import soot.toolkits.graph.ClassicCompleteUnitGraph;
import soot.toolkits.graph.UnitGraph;
import java.util.*;
import tp.utils.infoLogger;

import java.io.File;

public class HelloSoot {

    public static String sourceDirectory = System.getProperty("user.dir") + File.separator + "src/main/java/tutorial/demo";
    public static String clsName = "FizzBuzz";
    public static String methodName = "printFizzBuzz";

    public static void setupSoot() {
        G.reset();
        Options.v().set_prepend_classpath(true);
        Options.v().set_allow_phantom_refs(true);
        System.out.println("\n\n\n\n sourceDirectory: " + sourceDirectory);
        Options.v().set_soot_classpath(sourceDirectory);
        System.out.println("\n\n\n\n clsName: " + clsName);
        SootClass sc = Scene.v().loadClassAndSupport(clsName);
        System.out.println("\n\n\n\n CK0 ");
        sc.setApplicationClass();
        System.out.println("\n\n\n\n CK1 ");
        Scene.v().loadNecessaryClasses();

    }

    public static void main(String[] args) {

        System.out.println("\n\n\n\n TEST n\n\n\n\n");
        setupSoot();

        System.out.println("\n\n\n\n BK0 \n\n\n\n");
        // Retrieve printFizzBuzz's body
        SootClass mainClass = Scene.v().getSootClass(clsName);
        System.out.println("\n\n\n\n BK1 \n\n\n\n");
        List<SootMethod> methods = mainClass.getMethods();
        System.out.println("Methods lenght: " + methods.size());
        for (SootMethod m: methods) {
            System.out.println("Method name: " + m.getName());
        }

        SootMethod sm = mainClass.getMethodByName(methodName);
        System.out.println("\n\n\n\n BK2 \n\n\n\n");
        JimpleBody body = (JimpleBody) sm.retrieveActiveBody();
        System.out.println("\n\n\n\n BK3 \n\n\n\n");

        // Print some information about printFizzBuzz
        System.out.println("Method Signature: " + sm.getSignature());
        System.out.println("--------------");
        System.out.println("Argument(s):");
        for (Local l : body.getParameterLocals()) {
            System.out.println(l.getName() + " : " + l.getType());
        }
        System.out.println("--------------");
        System.out.println("This: " + body.getThisLocal());
        System.out.println("--------------");
        System.out.println("Units:");
        int c = 1;
        for (Unit u : body.getUnits()) {
            boolean isDefinitionStmt = u instanceof soot.jimple.DefinitionStmt;
            System.out.println("(" + c + ") " + u.toString());
            infoLogger.loggStmtType(u);
            c++;
            if (isDefinitionStmt) {
                soot.Value rightOp = ((soot.jimple.DefinitionStmt) u).getRightOp();
                infoLogger.loggExpType(rightOp);
                if (rightOp instanceof soot.jimple.NewExpr) {
                    System.out.println("------> Class type: " + ((soot.jimple.NewExpr) rightOp).getType().getNumber());
                }
            }
        }
        System.out.println("--------------");

        // Print statements that have branch conditions
        System.out.println("Branch Statements:");
        for (Unit u : body.getUnits()) {
            if (u instanceof JIfStmt)
                System.out.println(u.toString());
        }

        // Draw the control-flow graph of the method if 'draw' is provided in arguments
        boolean drawGraph = false;
        if (args.length > 0 && args[0].equals("draw"))
            drawGraph = true;
        if (drawGraph) {
            UnitGraph ug = new ClassicCompleteUnitGraph(sm.getActiveBody());
        }
    }
}