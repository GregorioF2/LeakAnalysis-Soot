/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tp_final;
import soot.*;
import soot.Body;
import soot.Local;
import soot.jimple.*;
import soot.jimple.JimpleBody;
import soot.jimple.internal.JIfStmt;
import soot.options.Options;
import soot.toolkits.graph.ClassicCompleteUnitGraph;
import soot.toolkits.graph.UnitGraph;
import java.util.*;
import tp.utils.infoLogger;
import java.util.*;  
import java.util.stream.Collectors;

import java.io.File;

public class PointsToAnalysis {
    public static String sourceDirectory = System.getProperty("user.dir") + File.separator + "src/main/java/final/test";
    public static String clsName = "CaseOne";
    public static int c = 1;

    public static void setupSoot() {
        G.reset();
        Options.v().set_prepend_classpath(true);
        Options.v().set_allow_phantom_refs(true);
        Options.v().set_soot_classpath(sourceDirectory);
        SootClass sc = Scene.v().loadClassAndSupport(clsName);
        sc.setApplicationClass();
        Scene.v().loadNecessaryClasses();
    }

    public static void main(String[] args) {
        setupSoot();
        
        DatalogIntegrator integrator = new DatalogIntegrator();

        SootClass mainClass = Scene.v().getSootClass(clsName);
        List<SootMethod> methods = mainClass.getMethods();
        List<Body> bodys = methods.stream()
        .map(method -> method.retrieveActiveBody())
        .collect(Collectors.toList());;

        for (Body body: bodys) {
            PointsToAnalysis.AnalyzeBody(body, body.getMethod(), integrator);
        }
        integrator.CloseWriters();
    }

    public static void AnalyzeBody(soot.Body body, SootMethod method, DatalogIntegrator integrator) {
        System.out.println("\n\n New method: " + method.getName() + ". Signature: " + method.getSignature() + ". Subsignature: " + method.getSubSignature() + "\n\n");
        integrator.WriteReachableFact(method);
        for (Unit u : body.getUnits()) {
            String unitString = u.toString();
            int margin = 90 - unitString.length();
            String marginString = new String(new char[margin]).replace("\0", " ");
            System.out.println(String.valueOf(c) +  "----> " + u.toString() + marginString + "  // " + String.join(", ", infoLogger.stmtTypes(u)));
            boolean isStmt = u instanceof Stmt;
            if (!isStmt) {
                continue;
            }
            integrator.WriteStmtFact((Stmt) u, method, c);

            c++;
        }

        for (Local l: body.getLocals()) {
            integrator.WriteVarType(method, l, l.getType().getNumber());
        }

        for (int i = 0; i < body.getMethod().getParameterCount(); i++) {
            integrator.WriteFormalArgFact(body.getMethod(), i, body.getParameterLocal(i));
        }
        
        if (!body.getMethod().isStatic()) {
            integrator.WriteThisVarFact(body.getMethod(), body.getThisLocal());
        }
    }
}