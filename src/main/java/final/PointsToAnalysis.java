/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tp_final;
import soot.*;
import soot.jimple.*;
import soot.jimple.JimpleBody;
import soot.jimple.internal.JIfStmt;
import soot.options.Options;
import soot.toolkits.graph.ClassicCompleteUnitGraph;
import soot.toolkits.graph.UnitGraph;
import java.util.*;
import tp.utils.infoLogger;

import java.io.File;

public class PointsToAnalysis {

    public static String sourceDirectory = System.getProperty("user.dir") + File.separator + "src/main/java/tutorial/demo";
    public static String clsName = "FizzBuzz";
    public static String methodName = "printFizzBuzz";

    public static void setupSoot() {
        G.reset();
        Options.v().set_prepend_classpath(true);
        Options.v().set_allow_phantom_refs(true);
        Options.v().set_soot_classpath(sourceDirectory);
        SootClass sc = Scene.v().loadClassAndSupport(clsName);
        sc.setApplicationClass();
        Scene.v().loadNecessaryClasses();
    }

    public static void main(String[] args) {
        DatalogIntegrator integrator = new DatalogIntegrator();
        setupSoot();
        // Retrieve printFizzBuzz's body
        SootClass mainClass = Scene.v().getSootClass(clsName);
        List<SootMethod> methods = mainClass.getMethods();
        // System.out.println("Methods lenght: " + methods.size());
        // for (SootMethod m: methods) {
        //     System.out.println("Method name: " + m.getName());
        // }
        SootMethod sm = mainClass.getMethodByName(methodName);
        JimpleBody body = (JimpleBody) sm.retrieveActiveBody();


        // Print some information about printFizzBuzz
        // for (Local l : body.getParameterLocals()) {
        //     System.out.println(l.getName() + " : " + l.getType());
        // }
        int c = 1;
        for (Unit u : body.getUnits()) {
            boolean isDefinitionStmt = u instanceof soot.jimple.AssignStmt;
            if (!isDefinitionStmt) {
                continue;
            }
            integrator.WriteFact((soot.jimple.AssignStmt) u);

            c++;
        }
        System.out.println("--------------");

        // Print statements that have branch conditions
        System.out.println("Branch Statements:");
        for (Unit u : body.getUnits()) {
            if (u instanceof JIfStmt)
                System.out.println(u.toString());
        }

        // Draw the control-flow graph of the method if 'draw' is provided in arguments
        boolean drawGraph = false;
        if (args.length > 0 && args[0].equals("draw"))
            drawGraph = true;
        if (drawGraph) {
            UnitGraph ug = new ClassicCompleteUnitGraph(sm.getActiveBody());
        }

        integrator.closeWriters();
    }
}